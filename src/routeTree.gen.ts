/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as AuthRouteRouteImport } from './routes/auth/route';
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route';
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index';
import { Route as AuthLoginRouteImport } from './routes/auth/login';
import { Route as AuthenticatedStaffIndexRouteImport } from './routes/_authenticated/staff/index';

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport
} as any);
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport
} as any);
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute
} as any);
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute
} as any);
const AuthenticatedStaffIndexRoute = AuthenticatedStaffIndexRouteImport.update({
  id: '/staff/',
  path: '/staff/',
  getParentRoute: () => AuthenticatedRouteRoute
} as any);

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteRouteWithChildren;
  '/auth/login': typeof AuthLoginRoute;
  '/': typeof AuthenticatedIndexRoute;
  '/staff': typeof AuthenticatedStaffIndexRoute;
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteRouteWithChildren;
  '/auth/login': typeof AuthLoginRoute;
  '/': typeof AuthenticatedIndexRoute;
  '/staff': typeof AuthenticatedStaffIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren;
  '/auth': typeof AuthRouteRouteWithChildren;
  '/auth/login': typeof AuthLoginRoute;
  '/_authenticated/': typeof AuthenticatedIndexRoute;
  '/_authenticated/staff/': typeof AuthenticatedStaffIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/auth' | '/auth/login' | '/' | '/staff';
  fileRoutesByTo: FileRoutesByTo;
  to: '/auth' | '/auth/login' | '/' | '/staff';
  id:
    | '__root__'
    | '/_authenticated'
    | '/auth'
    | '/auth/login'
    | '/_authenticated/'
    | '/_authenticated/staff/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren;
  AuthRouteRoute: typeof AuthRouteRouteWithChildren;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth';
      path: '/auth';
      fullPath: '/auth';
      preLoaderRoute: typeof AuthRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_authenticated': {
      id: '/_authenticated';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthenticatedRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_authenticated/': {
      id: '/_authenticated/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof AuthenticatedIndexRouteImport;
      parentRoute: typeof AuthenticatedRouteRoute;
    };
    '/auth/login': {
      id: '/auth/login';
      path: '/login';
      fullPath: '/auth/login';
      preLoaderRoute: typeof AuthLoginRouteImport;
      parentRoute: typeof AuthRouteRoute;
    };
    '/_authenticated/staff/': {
      id: '/_authenticated/staff/';
      path: '/staff';
      fullPath: '/staff';
      preLoaderRoute: typeof AuthenticatedStaffIndexRouteImport;
      parentRoute: typeof AuthenticatedRouteRoute;
    };
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute;
  AuthenticatedStaffIndexRoute: typeof AuthenticatedStaffIndexRoute;
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedStaffIndexRoute: AuthenticatedStaffIndexRoute
};

const AuthenticatedRouteRouteWithChildren = AuthenticatedRouteRoute._addFileChildren(
  AuthenticatedRouteRouteChildren
);

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute;
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute
};

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(AuthRouteRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
